#!/bin/bash

# User-defined variables
PORT=9757                     # Port to listen on, 9757 by default
INTERFACE=enp1s0            # Network interface to use, wlp2s0 for wireless
CONSECUTIVE_FAILS=6           # Required consecutive counts of 1
COUNT_DURATION=10              # Duration in seconds for counting packets
GAME=VRChat                   # Game name to terminate conditionally
SLEEP_DURATION=1              # Sleep duration in seconds
PACKAGES=100                  # Number of packages limit in specified timeframe

# Function to handle SIGINT signal
cleanup() {
    xrandr --output "$(xrandr | grep " connected" | cut -f1 -d " ")" --brightness 1  # Set brightness back to normal
    exit
}

# Trap SIGINT and call cleanup
trap cleanup SIGINT

# Dim the screen initially
xrandr --output "$(xrandr | grep " connected" | cut -f1 -d " ")" --brightness 0

# Main loop
while true; do
    count=0                    # Initialize counter for each cycle

    while true; do
        current_count=$(sudo timeout $COUNT_DURATION tcpdump -i $INTERFACE -n -tttt port $PORT -c $PACKAGES 2>/dev/null | wc -l)
        
        if [[ "$current_count" -eq 1 ]]; then
            count=$((count + 1))   # Increment counter
            echo "Counter: $count"  # Debug message
            if [[ "$count" -eq $CONSECUTIVE_FAILS ]]; then
                pids=$(pgrep -f "$GAME")  # Get PIDs of the game
                if [[ -n "$pids" ]]; then
                    echo "Terminating process(es) with PID(s): $pids"  # Debug message
                    kill $pids 2>/dev/null || kill -9 $pids 2>/dev/null  # Terminate the processes
                fi
                break  # Exit inner loop after termination
            fi
        else
            count=0  # Reset counter if condition is not met
        fi
        
        sleep $SLEEP_DURATION  # Delay before next check
    done

    echo "Monitoring restarted..."  # Indicate restart of monitoring
    sleep $SLEEP_DURATION  # Optional delay before next outer loop iteration
done
